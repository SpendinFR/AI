from typing import Any, Dict, List, Optional

CONTRACT_KEYS = [
    "hypothese_choisie",
    "incertitude",
    "prochain_test",
    "appris",
    "besoin",
]


def _stringify_list(items: Optional[List[str]]) -> str:
    if not items:
        return "‚Äî"
    return "\n".join([f"‚Ä¢ {x}" for x in items])


def format_agent_reply(
    base_text: str,
    *,
    hypothese_choisie: str,
    incertitude: float,
    prochain_test: Optional[str],
    appris: Optional[List[str]] = None,
    besoin: Optional[List[str]] = None,
) -> str:
    """
    Formate TOUTES les r√©ponses pour √©viter le g√©n√©rique.
    """
    if incertitude < 0:
        incertitude = 0.0
    if incertitude > 1:
        incertitude = 1.0

    learned = _stringify_list(appris)
    needs = _stringify_list(besoin)
    test_line = prochain_test or "‚Äî"

    return (
        f"{base_text}\n\n"
        f"‚Äî\n"
        f"üß© Hypoth√®se prise: {hypothese_choisie}\n"
        f"ü§î Incertitude: {incertitude:.2f}\n"
        f"üß™ Prochain test: {test_line}\n"
        f"üìó Ce que j'apprends: \n{learned}\n"
        f"üîß Besoins: \n{needs}"
    )


def ensure_contract(kwargs: Dict[str, Any]) -> Dict[str, Any]:
    """Compl√®te les champs manquants de contrat si besoin."""
    out = dict(kwargs)
    out.setdefault(
        "hypothese_choisie", "clarifier l‚Äôintention et la granularit√© attendue"
    )
    out.setdefault("incertitude", 0.5)
    out.setdefault(
        "prochain_test", "proposer 2 chemins d‚Äôaction et demander ton choix"
    )
    out.setdefault("appris", ["prioriser le concret et la tra√ßabilit√©"])
    out.setdefault(
        "besoin", ["confirmer si tu pr√©f√®res plan en √©tapes ou patch direct"]
    )
    return out
