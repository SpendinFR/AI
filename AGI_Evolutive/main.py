# üöÄ main.py - Point d'entr√©e AGI √âvolutive
import glob
import os
import sys
import time
import traceback

from AGI_Evolutive.core.autopilot import Autopilot
from AGI_Evolutive.core.cognitive_architecture import CognitiveArchitecture
from AGI_Evolutive.orchestrator import Orchestrator

BANNER = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë            üß†  AGI √âVOLUTIVE v1.0            ‚ïë
‚ïë  Architecture cognitive int√©gr√©e & √©volutive ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
HELP_TEXT = """
Commandes disponibles :
  /help        ‚Üí afficher cette aide
  /inbox       ‚Üí liste les fichiers d√©pos√©s dans ./inbox
  /save        ‚Üí force une sauvegarde imm√©diate
  /state       ‚Üí montre les infos d'√©tat globales
  /quit        ‚Üí quitte proprement
Astuce : d√©posez vos fichiers (.txt, .md, .json, etc.) dans ./inbox/
         ils seront int√©gr√©s automatiquement en m√©moire.
"""

def list_inbox(inbox_dir="inbox"):
    files = [os.path.basename(p) for p in glob.glob(os.path.join(inbox_dir, "*"))]
    if not files:
        print("üìÇ Inbox vide.")
    else:
        print("üìÅ Inbox :", ", ".join(files))

def run_cli():
    print(BANNER)
    print("Chargement de l'architecture cognitive‚Ä¶")
    try:
        arch = CognitiveArchitecture()
        orc = Orchestrator(arch)
        auto = Autopilot(arch, orchestrator=orc)
    except Exception as e:
        print("‚ùå Erreur d'initialisation :", e)
        traceback.print_exc()
        sys.exit(1)

    print("‚úÖ AGI initialis√©e. (Persistance & m√©moire pr√™tes)")
    print(HELP_TEXT)
    print("üó®Ô∏è  D√©marrez la conversation ou tapez /help.")

    while True:
        try:
            msg = input("\n> ").strip()
        except (EOFError, KeyboardInterrupt):
            print("\n‚è≥ Sauvegarde avant sortie‚Ä¶")
            try:
                auto.save_now()
            except Exception as e:
                print("‚ö†Ô∏è Erreur lors de la sauvegarde :", e)
            print("üëã Fin de session.")
            break

        if not msg:
            continue

        # ==== COMMANDES ====
        if msg in ("/quit", "/exit"):
            print("üíæ Sauvegarde finale‚Ä¶")
            auto.save_now()
            print("üëã √Ä bient√¥t.")
            break

        elif msg == "/help":
            print(HELP_TEXT)
            continue

        elif msg == "/inbox":
            list_inbox()
            continue

        elif msg == "/save":
            path = auto.save_now()
            print(f"üíæ Snapshot sauvegard√© : {path}")
            continue

        elif msg == "/state":
            try:
                t = time.strftime("%H:%M:%S", time.localtime())
                total_mem = getattr(arch.memory, "memory_metadata", {}).get("total_memories", 0)
                print(f"üß© Heure locale: {t}")
                print(f"üß† M√©moires stock√©es : {total_mem}")
                print(f"‚öôÔ∏è  Derni√®re sauvegarde : {time.strftime('%H:%M:%S', time.localtime(auto.persist._last_save))}")
            except Exception as e:
                print("‚ö†Ô∏è Impossible d'afficher l'√©tat :", e)
            continue

        # ==== INTERACTION ====
        try:
            response = auto.step(user_msg=msg)
            print("\nü§ñ", response)
        except Exception as e:
            print("‚ö†Ô∏è Erreur durant le cycle :", e)
            traceback.print_exc()
            continue

        # ==== QUESTIONS PROACTIVES ====
        questions = auto.pending_questions()
        for q in questions:
            print("‚ùì", q["text"])

if __name__ == "__main__":
    run_cli()
